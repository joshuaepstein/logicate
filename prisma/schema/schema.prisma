datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters", "fullTextSearch", "fullTextIndex", "prismaSchemaFolder", "omitApi"]
}

enum TimeFormat {
  hours12
  hours24

  @@map("time_format")
}

enum AccountType {
  STUDENT
  TEACHER
}

model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model User {
  id                      String      @id @default(uuid())
  name                    String
  email                   String      @unique
  username                String      @unique
  password                String
  progressLevel           Float       @default(0.0)
  accountType             AccountType @default(STUDENT)
  createdAt               DateTime    @default(now())
  updatedAt               DateTime    @updatedAt
  invalidLoginAttempts    Int         @default(0)
  lockedAccountUnlockCode String?
  lockedAt                DateTime?
  client_showBackground   Boolean     @default(true)
  isAdmin                 Boolean     @default(false)

  publicDisplay      PublicDisplay[]
  accounts           Account[]
  sessions           Session[]
  verificationTokens VerificationToken[]
  tokens             Token[]

  logicateSession LogicateSession[]
  questions       Question[]

  studentClassrooms Classroom[] @relation("StudentClassrooms")
  teacherClassrooms Classroom[] @relation("TeacherClassrooms")

  Changelog Changelog[]

  Invites Invites[]
}

enum Language {
  enGB // English (Great Britain)
  esES // Spanish (Spain)
  frFR // French (France)
}

model PublicDisplay {
  id     String @id @default(uuid())
  userId String @unique

  profilePicture String?
  timeFormat     TimeFormat @default(hours12)
  language       Language   @default(enGB)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
}

model VerificationToken {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expires   DateTime
  completed Boolean  @default(false)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Classroom {
  id          String   @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  students User[] @relation("StudentClassrooms")
  teachers User[] @relation("TeacherClassrooms")

  Invites Invites[]
}

// This stores the outgoing invitations to join a classroom
// So we need to store a toUser and a fromUser
model Invites {
  id          String @id @default(cuid())
  to          String
  fromId      String
  code        String @unique
  classroomId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  expires   DateTime

  accepted Boolean @default(false)

  from      User      @relation(fields: [fromId], references: [id])
  classroom Classroom @relation(fields: [classroomId], references: [id])
}
